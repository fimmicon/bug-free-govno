name: Enforce Required Reviews in Release Mode

on:
  pull_request_review:
    types: [submitted]

jobs:
  enforce-reviews:
    runs-on: ubuntu-latest
  
    env:
      RELEASE_REVIEWER: ThirdFimmiUser  # Define the reviewer

    steps:
      - name: Check if the reviewer is assigned or has left a review
        if: ${{ vars.RELEASE_MODE == 'true' }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          # Get the list of assigned reviewers
          ASSIGNED_REVIEWERS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/requested_reviewers)
          
          # Get the review statuses for the PR
          REVIEWS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews)

          # Check if the reviewer is assigned or has left any review
          if echo "$ASSIGNED_REVIEWERS" | grep -q "$RELEASE_REVIEWER"; then
            echo "$RELEASE_REVIEWER is already assigned as a reviewer."
          elif echo "$REVIEWS" |  grep -q "$RELEASE_REVIEWER"; then
            echo "$RELEASE_REVIEWER has already a reviewer."
          else
            echo "$RELEASE_REVIEWER is neither assigned nor has left a review. Adding as a reviewer now."

            # Add the reviewer user using curl
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/requested_reviewers \
              -d "{\"reviewers\":[\"$RELEASE_REVIEWER\"]}"

            # Adding a short delay to ensure the reviewer is registered in the system
            sleep 3
          fi

      - name: Check if the reviewer has approved the PR
        if: ${{ vars.RELEASE_MODE == 'true' }}
        run: |
          set -x
          PR_NUMBER="${{ github.event.pull_request.number }}"

          # Get the review statuses for the PR
          REVIEWS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews)

          # Check if the RELEASE_REVIEWER has approved the PR
          if echo "$REVIEWS" | jq -e '.[] | select(.user.login == "'"$RELEASE_REVIEWER"'") | select(.state == "APPROVED")' > /dev/null; then
            echo "$RELEASE_REVIEWER has approved the PR"
          else
            echo "$RELEASE_REVIEWER has not approved the PR"
            echo "$RELEASE_REVIEWER approval is required since the release is kickstarted"
            exit 1  # Fail the check if approval is missing
          fi
